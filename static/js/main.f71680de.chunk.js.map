{"version":3,"sources":["components/atoms/display/Loading.tsx","components/atoms/display/Avatar.tsx","components/atoms/display/Title.tsx","components/atoms/display/Card.tsx","components/atoms/display/Tag.tsx","routes/routes.ts","components/routes/Routes.tsx","App.tsx","index.tsx"],"names":["Loading","className","Avatar","props","fallback","alt","Title","sub","h","value","prefix","Heading","Card","label","body","Tag","color","onClick","routes","path","component","lazy","meta","navigation","show","Routes","filter","route","map","key","render","process","ReactDOM","StrictMode","document","getElementById"],"mappings":"sSAYeA,MARf,WACE,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,a,MCSNC,MAVf,SAAgBC,GACd,OACE,yBAAKF,UAAU,oBACb,kBAAC,WAAD,CAAUG,SAAU,kBAAC,EAAD,OAClB,yCAASD,EAAT,CAAgBF,UAAWE,EAAMF,WAAa,QAASI,IAAI,S,MCSpDC,MAdf,SAAeH,GAA8B,IAAD,EACSA,EAA3CI,WADkC,WACSJ,EAA9BK,SADqB,MACjB,EADiB,IACSL,EAAvBM,aADc,MACN,GADM,EACFC,EAAWP,EAAXO,OAClCC,EAAO,WAAOH,GAEpB,OACE,yBAAKP,UAAU,mBACb,kBAACU,EAAD,CAASV,UAAWM,EAAM,oBAAsB,iBAC7CG,EAAS,2BAAIA,GAAc,KAC5B,8BAAOD,M,MCGAG,MAXf,SAAcT,GAA6B,IACjCU,EAAgBV,EAAhBU,MAAOC,EAASX,EAATW,KAEf,OACE,yBAAKb,UAAU,kBACb,6BAAMa,GACN,6BAAMD,K,MCUGE,MAhBf,SAAaZ,GAA4B,IAC/BU,EAA+BV,EAA/BU,MAD8B,EACCV,EAAxBa,aADuB,MACf,GADe,EACXC,EAAYd,EAAZc,QAQ3B,OACE,0BAAMhB,UAAS,wBAAmBe,GAASC,QAPtB,WACjBA,GACFA,MAMCJ,K,iPCdDK,EAAS,CACb,CACEC,KAAM,IACNC,UAAWC,gBAAK,kBAAM,gCACtBC,KAAM,CACJC,WAAY,CACVC,MAAM,M,QCcCC,MAhBf,WACE,OACE,kBAAC,WAAD,CAAUrB,SAAU,kBAAC,IAAD,OACjBc,EACEQ,QAAO,SAACC,GAAD,OAAWA,EAAML,KAAKC,WAAWC,QACxCI,KAAI,SAACD,GAAD,OACH,kBAAC,IAAD,CACEE,IAAKF,EAAMR,KACXA,KAAMQ,EAAMR,KACZW,OAAQ,kBAAM,kBAACH,EAAMP,UAAP,CAAiBO,MAAOA,Y,MCEnCI,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SCPRC,IAASF,OACP,kBAAC,IAAMG,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f71680de.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"styles/components/commons/Loading.scss\";\n\nfunction Loading() {\n  return (\n    <div className=\"global-loading-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, { Suspense } from \"react\";\nimport { atomTypes } from \"types\";\nimport Loading from \"./Loading\";\n\nimport \"styles/components/atoms/display/Avatar.scss\";\n\nfunction Avatar(props: atomTypes.AvatarProps) {\n  return (\n    <div className=\"avatar-container\">\n      <Suspense fallback={<Loading />}>\n        <img {...props} className={props.className || \"thumb\"} alt=\"\" />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default Avatar;\n","import React from \"react\";\nimport { atomTypes } from \"types\";\n\nimport \"styles/components/atoms/display/Title.scss\";\n\nfunction Title(props: atomTypes.TitleProps) {\n  const { sub = false, h = 2, value = \"\", prefix } = props;\n  const Heading = `h${h}` as keyof JSX.IntrinsicElements;\n\n  return (\n    <div className=\"title-container\">\n      <Heading className={sub ? \"article-title-sub\" : \"article-title\"}>\n        {prefix ? <i>{prefix}</i> : null}\n        <span>{value}</span>\n      </Heading>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport { atomTypes } from \"types\";\n\nimport \"styles/components/atoms/display/Card.scss\";\n\nfunction Card(props: atomTypes.CardProps) {\n  const { label, body } = props;\n\n  return (\n    <div className=\"card-container\">\n      <div>{body}</div>\n      <div>{label}</div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport { atomTypes } from \"types\";\n\nimport \"styles/components/atoms/display/Tag.scss\";\n\nfunction Tag(props: atomTypes.TagProps) {\n  const { label, color = \"\", onClick } = props;\n\n  const onClickHandler = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <span className={`tag-container ${color}`} onClick={onClickHandler}>\n      {label}\n    </span>\n  );\n}\n\nexport default Tag;\n","import { lazy } from \"react\";\n\nconst routes = [\n  {\n    path: \"/\",\n    component: lazy(() => import(\"components/pages/Dashboard\")),\n    meta: {\n      navigation: {\n        show: true,\n      },\n    },\n  },\n];\n\nexport { routes };\n","import React, { Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { routes } from \"routes\";\nimport { Loading } from \"components/atoms/display\";\nimport { routeTypes } from \"types\";\n\nfunction Routes() {\n  return (\n    <Suspense fallback={<Loading />}>\n      {routes\n        .filter((route) => route.meta.navigation.show)\n        .map((route: routeTypes.Route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            render={() => <route.component route={route} />}\n          />\n        ))}\n    </Suspense>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport { hot } from \"react-hot-loader/root\";\nimport { Routes } from \"components/routes\";\n\nimport \"styles/App.scss\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Routes />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default process.env.NODE_ENV === \"production\" ? App : hot(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}